(function() {var implementors = {};
implementors["eq_bailsman"] = [{"text":"impl Serialize for GenesisConfig","synthetic":false,"types":[]}];
implementors["eq_balances"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(T::AccountId, T::Balance, u8)&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_claim"] = [{"text":"impl Serialize for StatementKind","synthetic":false,"types":[]},{"text":"impl Serialize for EthereumAddress","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(EthereumAddress, (&lt;&lt;&lt;T as Trait&gt;::VestingSchedule as VestingSchedule&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance, &lt;&lt;&lt;T as Trait&gt;::VestingSchedule as VestingSchedule&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance, T::BlockNumber))&gt;: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(EthereumAddress, &lt;&lt;&lt;T as Trait&gt;::VestingSchedule as VestingSchedule&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance, Option&lt;T::AccountId&gt;, bool)&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_oracle"] = [{"text":"impl Serialize for Public","synthetic":false,"types":[]},{"text":"impl Serialize for GenesisConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(u8, u64, u64)&gt;: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;u64: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_primitives"] = [{"text":"impl Serialize for Currency","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Serialize for SignedBalance&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Member,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for UserGroup","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Serialize for TotalAggregates&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for TransferReason","synthetic":false,"types":[]}];
implementors["eq_rate"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AuthorityId&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_session_manager"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::ValidatorId&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_vesting"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(T::AccountId, T::BlockNumber, T::BlockNumber, &lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance)&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_volatility"] = [{"text":"impl Serialize for GenesisConfig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(u8, u64, u64)&gt;: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(u8, u8, u64, u64)&gt;: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(u8, u64, u64)&gt;: Serialize,<br>&nbsp;&nbsp;&nbsp;&nbsp;u64: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["eq_whitelists"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Serialize for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()